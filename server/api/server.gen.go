// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// AgentRequest defines model for AgentRequest.
type AgentRequest struct {
	CaCrt     []openapi_types.File `json:"ca_crt"`
	ClientCrt []openapi_types.File `json:"client_crt"`
	ClientKey []openapi_types.File `json:"client_key"`
}

// AgentResponse defines model for AgentResponse.
type AgentResponse struct {
	CustomerId string `json:"customer_id"`
	Endpoint   string `json:"endpoint"`
}

// ClimonDeleteRequest defines model for ClimonDeleteRequest.
type ClimonDeleteRequest struct {
	// ClusterName Cluster in which to be deleted, default in-build cluster
	ClusterName *string `json:"cluster_name,omitempty"`
	CustomerId  string  `json:"customer_id"`

	// Namespace Namespace chart to be installed
	Namespace string `json:"namespace"`

	// PluginName Plugin name
	PluginName string `json:"plugin_name"`

	// ReleaseName Release name to be used for install
	ReleaseName string `json:"release_name"`

	// Timeout Timeout for the application installation
	Timeout int `json:"timeout"`
}

// ClimonPostRequest defines model for ClimonPostRequest.
type ClimonPostRequest struct {
	// ChartName Chart name in Repository
	ChartName string `json:"chart_name"`

	// ClusterName Cluster in which to be installed, default in-build cluster
	ClusterName *string `json:"cluster_name,omitempty"`

	// Namespace Namespace chart to be installed
	Namespace string `json:"namespace"`

	// PluginName Plugin name
	PluginName string `json:"plugin_name"`

	// ReleaseName Release name to be used for install
	ReleaseName string `json:"release_name"`

	// RepoName Repository name
	RepoName string `json:"repo_name"`

	// RepoUrl Repository URL
	RepoUrl string `json:"repo_url"`

	// Timeout Timeout for the application installation
	Timeout int `json:"timeout"`

	// Version Version of the chart
	Version *string `json:"version,omitempty"`
}

// ClusterRequest defines model for ClusterRequest.
type ClusterRequest struct {
	ClusterName string `json:"cluster_name"`
	CustomerId  string `json:"customer_id"`
	PluginName  string `json:"plugin_name"`
}

// DeployerDeleteRequest defines model for DeployerDeleteRequest.
type DeployerDeleteRequest struct {
	// ClusterName Cluster in which to be deleted, default in-build cluster
	ClusterName *string `json:"cluster_name,omitempty"`

	// Namespace Namespace chart to be installed
	Namespace string `json:"namespace"`

	// PluginName Plugin name
	PluginName string `json:"plugin_name"`

	// ReleaseName Release name to be used for install
	ReleaseName string `json:"release_name"`

	// Timeout Timeout for the application installation
	Timeout int `json:"timeout"`
}

// DeployerPostRequest defines model for DeployerPostRequest.
type DeployerPostRequest struct {
	// ChartName Chart name in Repository
	ChartName string `json:"chart_name"`

	// ClusterName Cluster in which to be installed, default in-build cluster
	ClusterName *string `json:"cluster_name,omitempty"`

	// Namespace Namespace chart to be installed
	Namespace string `json:"namespace"`

	// PluginName Plugin name
	PluginName string `json:"plugin_name"`

	// ReleaseName Release name to be used for install
	ReleaseName string `json:"release_name"`

	// RepoName Repository name
	RepoName string `json:"repo_name"`

	// RepoUrl Repository URL
	RepoUrl string `json:"repo_url"`

	// Timeout Timeout for the application installation
	Timeout int `json:"timeout"`

	// Version Version of the chart
	Version *string `json:"version,omitempty"`
}

// ProjectDeleteRequest defines model for ProjectDeleteRequest.
type ProjectDeleteRequest struct {
	// PluginName Plugin name
	PluginName string `json:"plugin_name"`

	// ProjectName Project name to be created in plugin
	ProjectName string `json:"project_name"`
}

// ProjectPostRequest defines model for ProjectPostRequest.
type ProjectPostRequest struct {
	// PluginName Plugin name
	PluginName string `json:"plugin_name"`

	// ProjectName Project name to be created in plugin
	ProjectName string `json:"project_name"`
}

// RepositoryDeleteRequest defines model for RepositoryDeleteRequest.
type RepositoryDeleteRequest struct {
	// PluginName Plugin name
	PluginName string `json:"plugin_name"`

	// RepoName Repository to added to plugin
	RepoName string `json:"repo_name"`
}

// RepositoryPostRequest defines model for RepositoryPostRequest.
type RepositoryPostRequest struct {
	// PluginName Plugin name
	PluginName string `json:"plugin_name"`

	// RepoName Repository to added to plugin
	RepoName string `json:"repo_name"`

	// RepoUrl Repository URL
	RepoUrl string `json:"repo_url"`
}

// Response Configuration request response
type Response struct {
	Message string `json:"message"`
	Status  string `json:"status"`
}

// StoreAgentCredRequest defines model for StoreAgentCredRequest.
type StoreAgentCredRequest struct {
	Credname   *string `json:"credname,omitempty"`
	CustomerId *string `json:"customer_id,omitempty"`
	Password   *string `json:"password,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// StoreCredRequest defines model for StoreCredRequest.
type StoreCredRequest struct {
	Credname *string `json:"credname,omitempty"`
	Password *string `json:"password,omitempty"`
	Pathname *string `json:"pathname,omitempty"`
	Username *string `json:"username,omitempty"`
}

// StoreSecretRequest defines model for StoreSecretRequest.
type StoreSecretRequest struct {
	Kubeconfig *map[string]string `json:"kubeconfig,omitempty"`
	Name       *string            `json:"name,omitempty"`
}

// DeleteClimonJSONRequestBody defines body for DeleteClimon for application/json ContentType.
type DeleteClimonJSONRequestBody = ClimonDeleteRequest

// PostClimonJSONRequestBody defines body for PostClimon for application/json ContentType.
type PostClimonJSONRequestBody = ClimonPostRequest

// PutClimonJSONRequestBody defines body for PutClimon for application/json ContentType.
type PutClimonJSONRequestBody = ClimonPostRequest

// DeleteConfigatorClusterJSONRequestBody defines body for DeleteConfigatorCluster for application/json ContentType.
type DeleteConfigatorClusterJSONRequestBody = ClusterRequest

// PostConfigatorClusterJSONRequestBody defines body for PostConfigatorCluster for application/json ContentType.
type PostConfigatorClusterJSONRequestBody = ClusterRequest

// DeleteConfigatorProjectJSONRequestBody defines body for DeleteConfigatorProject for application/json ContentType.
type DeleteConfigatorProjectJSONRequestBody = ProjectDeleteRequest

// PostConfigatorProjectJSONRequestBody defines body for PostConfigatorProject for application/json ContentType.
type PostConfigatorProjectJSONRequestBody = ProjectPostRequest

// PutConfigatorProjectJSONRequestBody defines body for PutConfigatorProject for application/json ContentType.
type PutConfigatorProjectJSONRequestBody = ProjectPostRequest

// DeleteConfigatorRepositoryJSONRequestBody defines body for DeleteConfigatorRepository for application/json ContentType.
type DeleteConfigatorRepositoryJSONRequestBody = RepositoryDeleteRequest

// PostConfigatorRepositoryJSONRequestBody defines body for PostConfigatorRepository for application/json ContentType.
type PostConfigatorRepositoryJSONRequestBody = RepositoryPostRequest

// PutConfigatorRepositoryJSONRequestBody defines body for PutConfigatorRepository for application/json ContentType.
type PutConfigatorRepositoryJSONRequestBody = RepositoryPostRequest

// DeleteDeployerJSONRequestBody defines body for DeleteDeployer for application/json ContentType.
type DeleteDeployerJSONRequestBody = DeployerDeleteRequest

// PostDeployerJSONRequestBody defines body for PostDeployer for application/json ContentType.
type PostDeployerJSONRequestBody = DeployerPostRequest

// PutDeployerJSONRequestBody defines body for PutDeployer for application/json ContentType.
type PutDeployerJSONRequestBody = DeployerPostRequest

// PostRegisterAgentMultipartRequestBody defines body for PostRegisterAgent for multipart/form-data ContentType.
type PostRegisterAgentMultipartRequestBody = AgentRequest

// PutRegisterAgentJSONRequestBody defines body for PutRegisterAgent for application/json ContentType.
type PutRegisterAgentJSONRequestBody = AgentRequest

// PostStoreAgentCredJSONRequestBody defines body for PostStoreAgentCred for application/json ContentType.
type PostStoreAgentCredJSONRequestBody = StoreAgentCredRequest

// PostStoreCredJSONRequestBody defines body for PostStoreCred for application/json ContentType.
type PostStoreCredJSONRequestBody = StoreCredRequest

// PostStoreSecretJSONRequestBody defines body for PostStoreSecret for application/json ContentType.
type PostStoreSecretJSONRequestBody = StoreSecretRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List of APIs provided by the service
	// (GET /api-docs)
	GetApiDocs(c *gin.Context)
	// deploy the application
	// (DELETE /climon)
	DeleteClimon(c *gin.Context)
	// deploy the application
	// (POST /climon)
	PostClimon(c *gin.Context)
	// deploy the application
	// (PUT /climon)
	PutClimon(c *gin.Context)
	// Delete the application
	// (DELETE /configator/cluster)
	DeleteConfigatorCluster(c *gin.Context)
	// deploy the application
	// (POST /configator/cluster)
	PostConfigatorCluster(c *gin.Context)
	// deploy the application
	// (DELETE /configator/project)
	DeleteConfigatorProject(c *gin.Context)
	// deploy the application
	// (POST /configator/project)
	PostConfigatorProject(c *gin.Context)
	// deploy the application
	// (PUT /configator/project)
	PutConfigatorProject(c *gin.Context)
	// deploy the application
	// (DELETE /configator/repository)
	DeleteConfigatorRepository(c *gin.Context)
	// deploy the application
	// (POST /configator/repository)
	PostConfigatorRepository(c *gin.Context)
	// deploy the application
	// (PUT /configator/repository)
	PutConfigatorRepository(c *gin.Context)
	// deploy the application
	// (DELETE /deployer)
	DeleteDeployer(c *gin.Context)
	// deploy the application
	// (POST /deployer)
	PostDeployer(c *gin.Context)
	// deploy the application
	// (PUT /deployer)
	PutDeployer(c *gin.Context)
	// Register agent
	// (GET /register/agent)
	GetRegisterAgent(c *gin.Context)
	// Register agent
	// (POST /register/agent)
	PostRegisterAgent(c *gin.Context)
	// Register agent
	// (PUT /register/agent)
	PutRegisterAgent(c *gin.Context)
	// Kubernetes readiness and liveness probe endpoint
	// (GET /status)
	GetStatus(c *gin.Context)
	// to store the credentials in agent vault
	// (POST /store/agent/cred)
	PostStoreAgentCred(c *gin.Context)
	// to store the credentials in agent vault
	// (POST /store/cred)
	PostStoreCred(c *gin.Context)
	// Retrieve stored secrets from agent vault
	// (GET /store/secret)
	GetStoreSecret(c *gin.Context)
	// to store the credentials in agent vault
	// (POST /store/secret)
	PostStoreSecret(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiDocs operation middleware
func (siw *ServerInterfaceWrapper) GetApiDocs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetApiDocs(c)
}

// DeleteClimon operation middleware
func (siw *ServerInterfaceWrapper) DeleteClimon(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteClimon(c)
}

// PostClimon operation middleware
func (siw *ServerInterfaceWrapper) PostClimon(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostClimon(c)
}

// PutClimon operation middleware
func (siw *ServerInterfaceWrapper) PutClimon(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutClimon(c)
}

// DeleteConfigatorCluster operation middleware
func (siw *ServerInterfaceWrapper) DeleteConfigatorCluster(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteConfigatorCluster(c)
}

// PostConfigatorCluster operation middleware
func (siw *ServerInterfaceWrapper) PostConfigatorCluster(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostConfigatorCluster(c)
}

// DeleteConfigatorProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteConfigatorProject(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteConfigatorProject(c)
}

// PostConfigatorProject operation middleware
func (siw *ServerInterfaceWrapper) PostConfigatorProject(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostConfigatorProject(c)
}

// PutConfigatorProject operation middleware
func (siw *ServerInterfaceWrapper) PutConfigatorProject(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutConfigatorProject(c)
}

// DeleteConfigatorRepository operation middleware
func (siw *ServerInterfaceWrapper) DeleteConfigatorRepository(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteConfigatorRepository(c)
}

// PostConfigatorRepository operation middleware
func (siw *ServerInterfaceWrapper) PostConfigatorRepository(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostConfigatorRepository(c)
}

// PutConfigatorRepository operation middleware
func (siw *ServerInterfaceWrapper) PutConfigatorRepository(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutConfigatorRepository(c)
}

// DeleteDeployer operation middleware
func (siw *ServerInterfaceWrapper) DeleteDeployer(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDeployer(c)
}

// PostDeployer operation middleware
func (siw *ServerInterfaceWrapper) PostDeployer(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDeployer(c)
}

// PutDeployer operation middleware
func (siw *ServerInterfaceWrapper) PutDeployer(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDeployer(c)
}

// GetRegisterAgent operation middleware
func (siw *ServerInterfaceWrapper) GetRegisterAgent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRegisterAgent(c)
}

// PostRegisterAgent operation middleware
func (siw *ServerInterfaceWrapper) PostRegisterAgent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostRegisterAgent(c)
}

// PutRegisterAgent operation middleware
func (siw *ServerInterfaceWrapper) PutRegisterAgent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutRegisterAgent(c)
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetStatus(c)
}

// PostStoreAgentCred operation middleware
func (siw *ServerInterfaceWrapper) PostStoreAgentCred(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostStoreAgentCred(c)
}

// PostStoreCred operation middleware
func (siw *ServerInterfaceWrapper) PostStoreCred(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostStoreCred(c)
}

// GetStoreSecret operation middleware
func (siw *ServerInterfaceWrapper) GetStoreSecret(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetStoreSecret(c)
}

// PostStoreSecret operation middleware
func (siw *ServerInterfaceWrapper) PostStoreSecret(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostStoreSecret(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api-docs", wrapper.GetApiDocs)

	router.DELETE(options.BaseURL+"/climon", wrapper.DeleteClimon)

	router.POST(options.BaseURL+"/climon", wrapper.PostClimon)

	router.PUT(options.BaseURL+"/climon", wrapper.PutClimon)

	router.DELETE(options.BaseURL+"/configator/cluster", wrapper.DeleteConfigatorCluster)

	router.POST(options.BaseURL+"/configator/cluster", wrapper.PostConfigatorCluster)

	router.DELETE(options.BaseURL+"/configator/project", wrapper.DeleteConfigatorProject)

	router.POST(options.BaseURL+"/configator/project", wrapper.PostConfigatorProject)

	router.PUT(options.BaseURL+"/configator/project", wrapper.PutConfigatorProject)

	router.DELETE(options.BaseURL+"/configator/repository", wrapper.DeleteConfigatorRepository)

	router.POST(options.BaseURL+"/configator/repository", wrapper.PostConfigatorRepository)

	router.PUT(options.BaseURL+"/configator/repository", wrapper.PutConfigatorRepository)

	router.DELETE(options.BaseURL+"/deployer", wrapper.DeleteDeployer)

	router.POST(options.BaseURL+"/deployer", wrapper.PostDeployer)

	router.PUT(options.BaseURL+"/deployer", wrapper.PutDeployer)

	router.GET(options.BaseURL+"/register/agent", wrapper.GetRegisterAgent)

	router.POST(options.BaseURL+"/register/agent", wrapper.PostRegisterAgent)

	router.PUT(options.BaseURL+"/register/agent", wrapper.PutRegisterAgent)

	router.GET(options.BaseURL+"/status", wrapper.GetStatus)

	router.POST(options.BaseURL+"/store/agent/cred", wrapper.PostStoreAgentCred)

	router.POST(options.BaseURL+"/store/cred", wrapper.PostStoreCred)

	router.GET(options.BaseURL+"/store/secret", wrapper.GetStoreSecret)

	router.POST(options.BaseURL+"/store/secret", wrapper.PostStoreSecret)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3wAAAP//R+tE4qYyAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
